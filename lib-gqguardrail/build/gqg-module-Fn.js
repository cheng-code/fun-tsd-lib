"use strict";
const exportedNames = [
    "PLAYGROUND_HEIGHT",
    "PLAYGROUND_WIDTH",
    "consolePrint",
    "createCircle",
    "createCircleInGroup",
    "createContainerIterator",
    "createGraph",
    "createGraphInGroup",
    "createGraphWithOptions",
    "createGroupInPlayground",
    "createInterpolatedGraph",
    "createInterpolatedGraphInGroup",
    "createLine",
    "createLineInGroup",
    "createOval",
    "createOvalInGroup",
    "createRect",
    "createRectInGroup",
    "createSpriteInGroup",
    "createTextInputSpriteInGroup",
    "createTextSpriteInGroup",
    "currentDate",
    "deleteSavedDictionary",
    "disableContextMenu",
    "drawCircle",
    "drawGraph",
    "drawInterpolatedGraph",
    "drawLine",
    "drawOval",
    "drawRect",
    "enableContextMenu",
    "forEachSpriteSpriteCollisionDo",
    "forEach2SpritesHit",
    "when2SpritesHit",
    "forEachSpriteFilteredCollisionDo",
    "forEachSpriteFilteredHit",
    "forEachSpriteGroupCollisionDo",
    "forEachSpriteGroupHit",
    "getKeyState",
    "getMouseButton1",
    "getMouseButton2",
    "getMouseButton3",
    "getMouseX",
    "getMouseY",
    "getSavedDictionary",
    "hideMouseCursor",
    "newGQAnimation",
    "removeSprite",
    "saveDictionaryAs",
    "setGqDebugFlag",
    "setGqPlaygroundDimensions",
    "showMouseCursor",
    "sprite",
    "spriteExists",
    "spriteGetHeight",
    "spriteGetWidth",
    "spriteGetX",
    "spriteGetY",
    "spriteGetZ",
    "spriteGroupNameFormatIsValid",
    "spriteHitDir",
    "spriteHitDirection",
    "spriteId",
    "spriteObject",
    "spritePauseAnimation",
    "spriteResumeAnimation",
    "spriteRotate",
    "spriteScale",
    "spriteSetAnimation",
    "spriteSetHeight",
    "spriteSetWidth",
    "spriteSetWidthHeight",
    "spriteSetX",
    "spriteSetXY",
    "spriteSetXYZ",
    "spriteSetY",
    "spriteSetZ",
    "textInputSpriteReset",
    "textInputSpriteSetHandler",
    "textInputSpriteSetString",
    "textInputSpriteString",
    "textInputSpriteSubmitted",
    "throwOnImgLoadError",
    "ANIMATION_HORIZONTAL",
    "ANIMATION_VERTICAL",
    "ANIMATION_ONCE",
    "ANIMATION_PINGPONG",
    "ANIMATION_CALLBACK",
    "ANIMATION_MULTI"
];
const Fn = {};
for (let x of exportedNames) {
    Fn[x] = eval(x);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3FnLW1vZHVsZS1Gbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9jaGVuZy9EZXNrdG9wL1RTLWRldi9mdW4tdHNkLWxpYi5naXRyZXBvL2xpYi1ncWd1YXJkcmFpbC9zcmMvZ3FnLW1vZHVsZS1Gbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBVUEsTUFBTSxhQUFhLEdBQUc7SUFDbEIsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2QsY0FBYztJQUNkLHFCQUFxQjtJQUNyQix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIseUJBQXlCO0lBQ3pCLHlCQUF5QjtJQUN6QixnQ0FBZ0M7SUFDaEMsWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLDhCQUE4QjtJQUM5Qix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixvQkFBb0I7SUFDcEIsWUFBWTtJQUNaLFdBQVc7SUFDWCx1QkFBdUI7SUFDdkIsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdDQUFnQztJQUNoQyxvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLGtDQUFrQztJQUNsQywwQkFBMEI7SUFDMUIsK0JBQStCO0lBQy9CLHVCQUF1QjtJQUN2QixhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsV0FBVztJQUNYLFdBQVc7SUFDWCxvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQiwyQkFBMkI7SUFDM0IsaUJBQWlCO0lBQ2pCLFFBQVE7SUFDUixjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osWUFBWTtJQUNaLFlBQVk7SUFDWiw4QkFBOEI7SUFDOUIsY0FBYztJQUNkLG9CQUFvQjtJQUNwQixVQUFVO0lBQ1YsY0FBYztJQUNkLHNCQUFzQjtJQUN0Qix1QkFBdUI7SUFDdkIsY0FBYztJQUNkLGFBQWE7SUFDYixvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixzQkFBc0I7SUFDdEIsWUFBWTtJQUNaLGFBQWE7SUFDYixjQUFjO0lBQ2QsWUFBWTtJQUNaLFlBQVk7SUFDWixzQkFBc0I7SUFDdEIsMkJBQTJCO0lBQzNCLDBCQUEwQjtJQUMxQix1QkFBdUI7SUFDdkIsMEJBQTBCO0lBQzFCLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixvQkFBb0I7SUFDcEIsb0JBQW9CO0lBQ3BCLGlCQUFpQjtDQUNwQixDQUFDO0FBRUYsTUFBTSxFQUFFLEdBQXdCLEVBQUUsQ0FBQztBQUNuQyxLQUFLLElBQUksQ0FBQyxJQUFJLGFBQWEsRUFBRTtJQUN6QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIENhcnNvbiBDaGVuZ1xuICogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4gKi9cblxuLy8gV2hhdCBpcyB0aGlzIGFuZCB3aHk/ICBCZWNhdXNlIENPUlMgcHJldmVudCB1c2Ugb2YgbW9kdWxlcyBsb2NhbGx5OlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTAxOTc0OTUvamF2YXNjcmlwdC1tb2R1bGVzLWFuZC1jb3JzXG5cbmNvbnN0IGV4cG9ydGVkTmFtZXMgPSBbXG4gICAgXCJQTEFZR1JPVU5EX0hFSUdIVFwiLFxuICAgIFwiUExBWUdST1VORF9XSURUSFwiLFxuICAgIFwiY29uc29sZVByaW50XCIsXG4gICAgXCJjcmVhdGVDaXJjbGVcIixcbiAgICBcImNyZWF0ZUNpcmNsZUluR3JvdXBcIixcbiAgICBcImNyZWF0ZUNvbnRhaW5lckl0ZXJhdG9yXCIsXG4gICAgXCJjcmVhdGVHcmFwaFwiLFxuICAgIFwiY3JlYXRlR3JhcGhJbkdyb3VwXCIsXG4gICAgXCJjcmVhdGVHcmFwaFdpdGhPcHRpb25zXCIsXG4gICAgXCJjcmVhdGVHcm91cEluUGxheWdyb3VuZFwiLFxuICAgIFwiY3JlYXRlSW50ZXJwb2xhdGVkR3JhcGhcIixcbiAgICBcImNyZWF0ZUludGVycG9sYXRlZEdyYXBoSW5Hcm91cFwiLFxuICAgIFwiY3JlYXRlTGluZVwiLFxuICAgIFwiY3JlYXRlTGluZUluR3JvdXBcIixcbiAgICBcImNyZWF0ZU92YWxcIixcbiAgICBcImNyZWF0ZU92YWxJbkdyb3VwXCIsXG4gICAgXCJjcmVhdGVSZWN0XCIsXG4gICAgXCJjcmVhdGVSZWN0SW5Hcm91cFwiLFxuICAgIFwiY3JlYXRlU3ByaXRlSW5Hcm91cFwiLFxuICAgIFwiY3JlYXRlVGV4dElucHV0U3ByaXRlSW5Hcm91cFwiLFxuICAgIFwiY3JlYXRlVGV4dFNwcml0ZUluR3JvdXBcIixcbiAgICBcImN1cnJlbnREYXRlXCIsXG4gICAgXCJkZWxldGVTYXZlZERpY3Rpb25hcnlcIixcbiAgICBcImRpc2FibGVDb250ZXh0TWVudVwiLFxuICAgIFwiZHJhd0NpcmNsZVwiLFxuICAgIFwiZHJhd0dyYXBoXCIsXG4gICAgXCJkcmF3SW50ZXJwb2xhdGVkR3JhcGhcIixcbiAgICBcImRyYXdMaW5lXCIsXG4gICAgXCJkcmF3T3ZhbFwiLFxuICAgIFwiZHJhd1JlY3RcIixcbiAgICBcImVuYWJsZUNvbnRleHRNZW51XCIsXG4gICAgXCJmb3JFYWNoU3ByaXRlU3ByaXRlQ29sbGlzaW9uRG9cIixcbiAgICBcImZvckVhY2gyU3ByaXRlc0hpdFwiLFxuICAgIFwid2hlbjJTcHJpdGVzSGl0XCIsXG4gICAgXCJmb3JFYWNoU3ByaXRlRmlsdGVyZWRDb2xsaXNpb25Eb1wiLFxuICAgIFwiZm9yRWFjaFNwcml0ZUZpbHRlcmVkSGl0XCIsXG4gICAgXCJmb3JFYWNoU3ByaXRlR3JvdXBDb2xsaXNpb25Eb1wiLFxuICAgIFwiZm9yRWFjaFNwcml0ZUdyb3VwSGl0XCIsXG4gICAgXCJnZXRLZXlTdGF0ZVwiLFxuICAgIFwiZ2V0TW91c2VCdXR0b24xXCIsXG4gICAgXCJnZXRNb3VzZUJ1dHRvbjJcIixcbiAgICBcImdldE1vdXNlQnV0dG9uM1wiLFxuICAgIFwiZ2V0TW91c2VYXCIsXG4gICAgXCJnZXRNb3VzZVlcIixcbiAgICBcImdldFNhdmVkRGljdGlvbmFyeVwiLFxuICAgIFwiaGlkZU1vdXNlQ3Vyc29yXCIsXG4gICAgXCJuZXdHUUFuaW1hdGlvblwiLFxuICAgIFwicmVtb3ZlU3ByaXRlXCIsXG4gICAgXCJzYXZlRGljdGlvbmFyeUFzXCIsXG4gICAgXCJzZXRHcURlYnVnRmxhZ1wiLFxuICAgIFwic2V0R3FQbGF5Z3JvdW5kRGltZW5zaW9uc1wiLFxuICAgIFwic2hvd01vdXNlQ3Vyc29yXCIsXG4gICAgXCJzcHJpdGVcIixcbiAgICBcInNwcml0ZUV4aXN0c1wiLFxuICAgIFwic3ByaXRlR2V0SGVpZ2h0XCIsXG4gICAgXCJzcHJpdGVHZXRXaWR0aFwiLFxuICAgIFwic3ByaXRlR2V0WFwiLFxuICAgIFwic3ByaXRlR2V0WVwiLFxuICAgIFwic3ByaXRlR2V0WlwiLFxuICAgIFwic3ByaXRlR3JvdXBOYW1lRm9ybWF0SXNWYWxpZFwiLFxuICAgIFwic3ByaXRlSGl0RGlyXCIsXG4gICAgXCJzcHJpdGVIaXREaXJlY3Rpb25cIixcbiAgICBcInNwcml0ZUlkXCIsXG4gICAgXCJzcHJpdGVPYmplY3RcIixcbiAgICBcInNwcml0ZVBhdXNlQW5pbWF0aW9uXCIsXG4gICAgXCJzcHJpdGVSZXN1bWVBbmltYXRpb25cIixcbiAgICBcInNwcml0ZVJvdGF0ZVwiLFxuICAgIFwic3ByaXRlU2NhbGVcIixcbiAgICBcInNwcml0ZVNldEFuaW1hdGlvblwiLFxuICAgIFwic3ByaXRlU2V0SGVpZ2h0XCIsXG4gICAgXCJzcHJpdGVTZXRXaWR0aFwiLFxuICAgIFwic3ByaXRlU2V0V2lkdGhIZWlnaHRcIixcbiAgICBcInNwcml0ZVNldFhcIixcbiAgICBcInNwcml0ZVNldFhZXCIsXG4gICAgXCJzcHJpdGVTZXRYWVpcIixcbiAgICBcInNwcml0ZVNldFlcIixcbiAgICBcInNwcml0ZVNldFpcIixcbiAgICBcInRleHRJbnB1dFNwcml0ZVJlc2V0XCIsXG4gICAgXCJ0ZXh0SW5wdXRTcHJpdGVTZXRIYW5kbGVyXCIsXG4gICAgXCJ0ZXh0SW5wdXRTcHJpdGVTZXRTdHJpbmdcIixcbiAgICBcInRleHRJbnB1dFNwcml0ZVN0cmluZ1wiLFxuICAgIFwidGV4dElucHV0U3ByaXRlU3VibWl0dGVkXCIsXG4gICAgXCJ0aHJvd09uSW1nTG9hZEVycm9yXCIsXG4gICAgXCJBTklNQVRJT05fSE9SSVpPTlRBTFwiLFxuICAgIFwiQU5JTUFUSU9OX1ZFUlRJQ0FMXCIsXG4gICAgXCJBTklNQVRJT05fT05DRVwiLFxuICAgIFwiQU5JTUFUSU9OX1BJTkdQT05HXCIsXG4gICAgXCJBTklNQVRJT05fQ0FMTEJBQ0tcIixcbiAgICBcIkFOSU1BVElPTl9NVUxUSVwiXG5dO1xuXG5jb25zdCBGbjogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuZm9yIChsZXQgeCBvZiBleHBvcnRlZE5hbWVzKSB7XG4gICAgRm5beF0gPSBldmFsKHgpO1xufVxuIl19